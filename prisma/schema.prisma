// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(CLIENT)

  accounts Account[]
  sessions Session[]
  tickets  Ticket[]
  comments Comment[]
}

enum Role {
  CLIENT
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ticket {
  id        Int      @id @default(autoincrement())
  ticketId  String   @unique
  title     String
  message   String
  status    Status   @default(NEW)
  mode      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  comments Comment[]
  payments Payment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  createdAt DateTime @default(now())
}

model Payment {
  id              Int       @id @default(autoincrement())
  ticketId        Int
  ticket          Ticket    @relation(fields: [ticketId], references: [id])
  amount          Int // en cents
  currency        String
  status          PayStatus @default(PENDING)
  stripeSessionId String?
  stripePaymentId String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

enum Status {
  NEW
  IN_PROGRESS
  ON_HOLD
  DONE
  CLOSED
}

enum PayStatus {
  PENDING
  PAID
  FAILED
}
